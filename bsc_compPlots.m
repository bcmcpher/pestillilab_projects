function [ fh ] = bsc_compPlots(fg, pco, pca, fbend, wght)
%
% inputs:
% fg    = fe fiber group of standard structure to be plotted
% pc1   = paired connection object - original ROI indices
% pc2   = paired connection object - aparc ROI indices
% fbend = select 'int' (intersect) or 'end' (end-point) for fibers ID'd in ROI 
% wght  = select 'all' or 'nz' to include all fibers or only non-zero weighted fibers
% 
% outputs: 
% fh = a figure handle for the figure object generated by this script

% create working switch from input arguments
% better than over parsing arguments...

fibs = [fbend '-' wght];

switch fibs
    case 'int-all'
        ofib = pco.int.fibers;
        afib = pca.int.fibers;
        fib1 = setdiff(ofib, afib);
        fib2 = setdiff(afib, ofib);
        nfib = [ fib1; fib2 ];
        ifib = intersect(ofib, afib);
        
    case 'int-nz'
        ofib = pco.int.nzfibs;
        afib = pca.int.nzfibs;
        fib1 = setdiff(ofib, afib);
        fib2 = setdiff(afib, ofib);
        nfib = [ fib1; fib2 ];
        ifib = intersect(ofib, afib);
        
    case 'end-all'
        ofib = pco.end.fibers;
        afib = pca.end.fibers;
        fib1 = setdiff(ofib, afib);
        fib2 = setdiff(afib, ofib);
        nfib = [ fib1; fib2 ];
        ifib = intersect(ofib, afib);
        
    case 'end-nz'
        ofib = pco.end.nzfibs;
        afib = pca.end.nzfibs;
        fib1 = setdiff(ofib, afib);
        fib2 = setdiff(afib, ofib);
        nfib = [ fib1; fib2 ];
        ifib = intersect(ofib, afib);
        
    otherwise
        error('Invalid fiber end operation (fbend) or weight (wght) arguments supplied');
end

% print fiber information
display(['Fibers connecting ' pca.roi1 ' and ' pca.roi2]);
display(['Original PC has : ' num2str(size(ofib, 1)), '  fibers.']);
display(['aparc PC has    : ' num2str(size(afib, 1)), '  fibers.']);
display(['The PC has      : ' num2str(size(ifib, 1)), '  intersecting fibers.']);
display(['The aparc has   : ' num2str(size(fib2, 1)), '  unique fibers.']);
display(['The PC has      : ' num2str(size(fib1, 1)), '  extra crap fibers.']);

% create tmp fiber objects
fgo = fg;
fga = fg;
fg1 = fg;
fg2 = fg;
fgn = fg;
fgi = fg;

% subset fibers to each group
fgo.fibers = fgo.fibers(ofib);
fga.fibers = fga.fibers(afib);
fg1.fibers = fg1.fibers(fib1);
fg2.fibers = fg2.fibers(fib2);
fgn.fibers = fgn.fibers(nfib);
fgi.fibers = fgi.fibers(ifib);

figure;

%% plot original fibers

ax1 = subplot(2, 2, 1);
hold on;

for ii = 1:length(fgo.fibers)    
    plot3(fgo.fibers{ii}(1,:),fgo.fibers{ii}(2,:),fgo.fibers{ii}(3,:),'Color',[1 0 0]);
end

title('Original Fibers');
xlabel('X coordinates');
ylabel('Y coordinates');
zlabel('Z coordinates');

%% plot original fibers

ax2 = subplot(2, 2, 2);
hold on;

for ii = 1:length(fga.fibers)    
    plot3(fga.fibers{ii}(1,:),fga.fibers{ii}(2,:),fga.fibers{ii}(3,:),'Color',[0 0 1]);
end

title('aparc Fibers');
xlabel('X coordinates');
ylabel('Y coordinates');
zlabel('Z coordinates');

%% plot intersecting fibers

ax3 = subplot(2, 2, 3);
hold on;

for ii = 1:length(fgi.fibers)    
    plot3(fgi.fibers{ii}(1,:),fgi.fibers{ii}(2,:),fgi.fibers{ii}(3,:),'Color',[1 0 1]);
end

title('Intersecting Fibers');
xlabel('X coordinates');
ylabel('Y coordinates');
zlabel('Z coordinates');

%% plot intersecting fibers

ax4 = subplot(2, 2, 4);
hold on;

for ii = 1:length(fg1.fibers)    
    plot3(fg1.fibers{ii}(1,:),fg1.fibers{ii}(2,:),fg1.fibers{ii}(3,:),'Color',[0 0.5 1]);
end

title('Extra Crap');
xlabel('X coordinates');
ylabel('Y coordinates');
zlabel('Z coordinates');

%% global plot options

% link the subplot rotations together
Link = linkprop([ ax1, ax2, ax3, ax4 ], {'CameraUpVector', 'CameraPosition', 'CameraTarget', 'CameraViewAngle'});
setappdata(gcf, 'StoreTheLink', Link);

% lock axes for similar scaling
linkaxes([ ax1, ax2, ax3, ax4 ], 'xy');

% return figure handle
fh = gcf;

end

