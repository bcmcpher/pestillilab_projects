function [ fh ] = bsc_compRoiPlots(fg, pco, vxo1, vxo2, pca, vxa1, vxa2, fbend, wght)
%
% inputs:
% fg    = fe fiber group of standard structure to be plotted
% pc1   = paired connection object - original ROI indices
% pc2   = paired connection object - aparc ROI indices
% fbend = select 'int' (intersect) or 'end' (end-point) for fibers ID'd in ROI 
% wght  = select 'all' or 'nz' to include all fibers or only non-zero weighted fibers
% 
% outputs: 
% fh = a figure handle for the figure object generated by this script
%
% bsc_compRoiPlots(fe.fg, pconn_forig{1}, vxo{1}, vxo{2}, pconn_faparc{1}, vx{1}, vx{2}, 'end', 'all');
%

% create working switch from input arguments
% better than over parsing arguments...

fibs = [fbend '-' wght];

switch fibs
    case 'int-all'
        ofib = pco.int.fibers;
        afib = pca.int.fibers;
        fib1 = setdiff(ofib, afib);
        fib2 = setdiff(afib, ofib);
        nfib = [ fib1; fib2 ];
        ifib = intersect(ofib, afib);
        
    case 'int-nz'
        ofib = pco.int.nzfibs;
        afib = pca.int.nzfibs;
        fib1 = setdiff(ofib, afib);
        fib2 = setdiff(afib, ofib);
        nfib = [ fib1; fib2 ];
        ifib = intersect(ofib, afib);
        
    case 'end-all'
        ofib = pco.end.fibers;
        afib = pca.end.fibers;
        fib1 = setdiff(ofib, afib);
        fib2 = setdiff(afib, ofib);
        nfib = [ fib1; fib2 ];
        ifib = intersect(ofib, afib);
        
    case 'end-nz'
        ofib = pco.end.nzfibs;
        afib = pca.end.nzfibs;
        fib1 = setdiff(ofib, afib);
        fib2 = setdiff(afib, ofib);
        nfib = [ fib1; fib2 ];
        ifib = intersect(ofib, afib);
        
    otherwise
        error('Invalid fiber end operation (fbend) or weight (wght) arguments supplied');
end

%% error check the ROI sizes
if size(pco.roi1vx, 1) ~= size(vxo1.coords, 1) || pca.roi1vx ~= size(vxa1.coords, 1)
    error('The wrong ROI index for ROI1 is used');
end

if size(pco.roi2vx, 1) ~= size(vxo2.coords, 1) || pca.roi2vx ~= size(vxa2.coords, 1)
    error('The wrong ROI index for the ROI2 is used');
end

%% print fiber information
display(['Fibers connecting ' pca.roi1 ' and ' pca.roi2]);
display(['Original PC has  : ' num2str(size(ofib, 1)), '  fibers.']);
display(['aparc PC has     : ' num2str(size(afib, 1)), '  fibers.']);
display(['Orig PC has xtra : ' num2str(size(nfib, 1)), '  fibers.']);
%display(['The PC has       : ' num2str(size(ifib, 1)), '  intersecting fibers.']);
%display(['The aparc has    : ' num2str(size(fib2, 1)), '  unique fibers.']);
%display(['The PC has       : ' num2str(size(fib1, 1)), '  extra crap fibers.']);
display(['ROI Orig: ' num2str(size(vxo1.coords, 1)) ' voxels - ROI aparc: ' num2str(size(vxa1.coords, 1)) ' voxels - Diff: ' num2str(size(vxo1.coords, 1)-size(vxa1.coords, 1))]);
display(['ROI Orig: ' num2str(size(vxo2.coords, 1)) ' voxels - ROI aparc: ' num2str(size(vxa2.coords, 1)) ' voxels - Diff: ' num2str(size(vxo2.coords, 1)-size(vxa2.coords, 1))]);
display(['Fiber Ratio      : ' num2str(size(ofib, 1)/size(afib, 1)) ]);
display(['ROI 1 Ratio      : ' num2str(size(vxo1.coords, 1)/size(vxa1.coords, 1)) ]);
display(['ROI 2 Ratio      : ' num2str(size(vxo2.coords, 1)/size(vxa2.coords, 1)) ]);

%% create tmp fiber objects
fgo = fg;
fga = fg;
fg1 = fg;
fg2 = fg;
fgn = fg;
fgi = fg;

% subset fibers to each group
fgo.fibers = fgo.fibers(ofib);
fga.fibers = fga.fibers(afib);
fg1.fibers = fg1.fibers(fib1);
fg2.fibers = fg2.fibers(fib2);
fgn.fibers = fgn.fibers(nfib);
fgi.fibers = fgi.fibers(ifib);

figure;

%% plot original fibers

ax1 = subplot(2, 3, 1);
hold on;

for ii = 1:length(fgo.fibers)    
    plot3(fgo.fibers{ii}(1,:),fgo.fibers{ii}(2,:),fgo.fibers{ii}(3,:),'Color',[1 0 0]);
end

title('Original Fibers');
xlabel('X coordinates');
ylabel('Y coordinates');
zlabel('Z coordinates');

%% plot new fibers

ax2 = subplot(2, 3, 2);
hold on;

for ii = 1:length(fga.fibers)    
    plot3(fga.fibers{ii}(1,:),fga.fibers{ii}(2,:),fga.fibers{ii}(3,:),'Color',[0 0 1]);
end

title('aparc Fibers');
xlabel('X coordinates');
ylabel('Y coordinates');
zlabel('Z coordinates');

%% plot extra fibers

ax3 = subplot(2, 3, 3);
hold on;

for ii = 1:length(fgn.fibers)    
    plot3(fgn.fibers{ii}(1,:),fgn.fibers{ii}(2,:),fgn.fibers{ii}(3,:),'Color',[1 0 1]);
end

title('Extra Fibers');
xlabel('X coordinates');
ylabel('Y coordinates');
zlabel('Z coordinates');

%% plot original rois

ax4 = subplot(2, 3, 4);
hold on;

scatter3(vxo1.coords(:,1), vxo1.coords(:,2), vxo1.coords(:,3), 'filled');
scatter3(vxo2.coords(:,1), vxo2.coords(:,2), vxo2.coords(:,3), 'filled');

title('Original ROI Voxels');
xlabel('X coordinates');
ylabel('Y coordinates');
zlabel('Z coordinates');

%% plot new rois

ax5 = subplot(2, 3, 5);
hold on;

scatter3(vxa1.coords(:,1), vxa1.coords(:,2), vxa1.coords(:,3), 'filled');
scatter3(vxa2.coords(:,1), vxa2.coords(:,2), vxa2.coords(:,3), 'filled');

title('aparc ROI Voxels');
xlabel('X coordinates');
ylabel('Y coordinates');
zlabel('Z coordinates');

%% plot extra rois

ax6 = subplot(2, 3, 6);
hold on;

% find the unique voxels in the larger ROIs
vxd1.coords = setdiff(vxa1.coords, vxo1.coords, 'rows');
vxd2.coords = setdiff(vxa2.coords, vxo2.coords, 'rows');

scatter3(vxd1.coords(:,1), vxd1.coords(:,2), vxd1.coords(:,3), 'filled');
scatter3(vxd2.coords(:,1), vxd2.coords(:,2), vxd2.coords(:,3), 'filled');

title('Extra ROI Voxels');
xlabel('X coordinates');
ylabel('Y coordinates');
zlabel('Z coordinates');

%% global plot options

% link the subplot rotations together
Link = linkprop([ ax1, ax2, ax3, ax4, ax5, ax6 ], {'CameraUpVector', 'CameraPosition', 'CameraTarget', 'CameraViewAngle'});
setappdata(gcf, 'StoreTheLink', Link);

% lock axes for similar scaling
linkaxes([ ax1, ax2, ax3, ax4, ax5, ax6 ], 'xy');

% return figure handle
fh = gcf;

end

